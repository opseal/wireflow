{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { NavigationEnd } from '@angular/router';\nimport { Subject, takeUntil } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { loadUserProfile } from './core/store/auth/auth.actions';\nimport { selectIsAuthenticated, selectUser } from './core/store/auth/auth.selectors';\nlet AppComponent = class AppComponent {\n  constructor(router, store, authService, notificationService, webSocketService) {\n    this.router = router;\n    this.store = store;\n    this.authService = authService;\n    this.notificationService = notificationService;\n    this.webSocketService = webSocketService;\n    this.title = 'VPN Management System';\n    this.isAuthenticated = false;\n    this.currentUser = null;\n    this.isLoading = true;\n    this.destroy$ = new Subject();\n  }\n  ngOnInit() {\n    this.initializeApp();\n    this.setupRouterEvents();\n    this.setupStoreSubscriptions();\n    this.setupWebSocketConnection();\n  }\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n  initializeApp() {\n    // Check if user is already authenticated\n    if (this.authService.isAuthenticated()) {\n      this.store.dispatch(loadUserProfile());\n    }\n    this.isLoading = false;\n  }\n  setupRouterEvents() {\n    this.router.events.pipe(filter(event => event instanceof NavigationEnd), takeUntil(this.destroy$)).subscribe(event => {\n      // Track page views for analytics\n      this.trackPageView(event.url);\n    });\n  }\n  setupStoreSubscriptions() {\n    // Subscribe to authentication state\n    this.store.select(selectIsAuthenticated).pipe(takeUntil(this.destroy$)).subscribe(isAuthenticated => {\n      this.isAuthenticated = isAuthenticated;\n      if (isAuthenticated) {\n        this.webSocketService.connect();\n      } else {\n        this.webSocketService.disconnect();\n      }\n    });\n    // Subscribe to user profile\n    this.store.select(selectUser).pipe(takeUntil(this.destroy$)).subscribe(user => {\n      this.currentUser = user;\n    });\n  }\n  setupWebSocketConnection() {\n    // Listen for real-time notifications\n    this.webSocketService.onNotification().pipe(takeUntil(this.destroy$)).subscribe(notification => {\n      this.notificationService.showNotification(notification);\n    });\n    // Listen for VPN status updates\n    this.webSocketService.onVPNStatusUpdate().pipe(takeUntil(this.destroy$)).subscribe(status => {\n      // Handle VPN status updates\n      console.log('VPN Status Update:', status);\n    });\n  }\n  trackPageView(url) {\n    // Implement analytics tracking\n    console.log('Page view:', url);\n  }\n  onLogout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"names":["Component","NavigationEnd","Subject","takeUntil","filter","loadUserProfile","selectIsAuthenticated","selectUser","AppComponent","constructor","router","store","authService","notificationService","webSocketService","title","isAuthenticated","currentUser","isLoading","destroy$","ngOnInit","initializeApp","setupRouterEvents","setupStoreSubscriptions","setupWebSocketConnection","ngOnDestroy","next","complete","dispatch","events","pipe","event","subscribe","trackPageView","url","select","connect","disconnect","user","onNotification","notification","showNotification","onVPNStatusUpdate","status","console","log","onLogout","logout","navigate","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\BS781\\Codespace\\VPN\\web-client\\src\\app\\app.component.ts"],"sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Router, NavigationEnd } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\n\r\nimport { AuthService } from './core/services/auth.service';\r\nimport { NotificationService } from './core/services/notification.service';\r\nimport { WebSocketService } from './core/services/websocket.service';\r\nimport { AppState } from './core/store/app.state';\r\nimport { loadUserProfile } from './core/store/auth/auth.actions';\r\nimport { selectIsAuthenticated, selectUser } from './core/store/auth/auth.selectors';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent implements OnInit, OnDestroy {\r\n  title = 'VPN Management System';\r\n  isAuthenticated = false;\r\n  currentUser: any = null;\r\n  isLoading = true;\r\n  private destroy$ = new Subject<void>();\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private store: Store<AppState>,\r\n    private authService: AuthService,\r\n    private notificationService: NotificationService,\r\n    private webSocketService: WebSocketService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.initializeApp();\r\n    this.setupRouterEvents();\r\n    this.setupStoreSubscriptions();\r\n    this.setupWebSocketConnection();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  private initializeApp(): void {\r\n    // Check if user is already authenticated\r\n    if (this.authService.isAuthenticated()) {\r\n      this.store.dispatch(loadUserProfile());\r\n    }\r\n    \r\n    this.isLoading = false;\r\n  }\r\n\r\n  private setupRouterEvents(): void {\r\n    this.router.events\r\n      .pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        takeUntil(this.destroy$)\r\n      )\r\n      .subscribe((event: NavigationEnd) => {\r\n        // Track page views for analytics\r\n        this.trackPageView(event.url);\r\n      });\r\n  }\r\n\r\n  private setupStoreSubscriptions(): void {\r\n    // Subscribe to authentication state\r\n    this.store.select(selectIsAuthenticated)\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe(isAuthenticated => {\r\n        this.isAuthenticated = isAuthenticated;\r\n        \r\n        if (isAuthenticated) {\r\n          this.webSocketService.connect();\r\n        } else {\r\n          this.webSocketService.disconnect();\r\n        }\r\n      });\r\n\r\n    // Subscribe to user profile\r\n    this.store.select(selectUser)\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe(user => {\r\n        this.currentUser = user;\r\n      });\r\n  }\r\n\r\n  private setupWebSocketConnection(): void {\r\n    // Listen for real-time notifications\r\n    this.webSocketService.onNotification()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe(notification => {\r\n        this.notificationService.showNotification(notification);\r\n      });\r\n\r\n    // Listen for VPN status updates\r\n    this.webSocketService.onVPNStatusUpdate()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe(status => {\r\n        // Handle VPN status updates\r\n        console.log('VPN Status Update:', status);\r\n      });\r\n  }\r\n\r\n  private trackPageView(url: string): void {\r\n    // Implement analytics tracking\r\n    console.log('Page view:', url);\r\n  }\r\n\r\n  onLogout(): void {\r\n    this.authService.logout();\r\n    this.router.navigate(['/login']);\r\n  }\r\n}\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}