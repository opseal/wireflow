name: VPN CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Bandit security linter
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true

  # Code Quality
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install flake8 black isort mypy
        pip install -r src/api/requirements.txt

    - name: Run Black formatter check
      run: black --check src/

    - name: Run isort import sorting check
      run: isort --check-only src/

    - name: Run Flake8 linter
      run: flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Run MyPy type checking
      run: mypy src/api/app.py --ignore-missing-imports

  # Build and Test
  build-test:
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build WireGuard image
      uses: docker/build-push-action@v5
      with:
        context: ./docker/wireguard
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/wireguard:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build API image
      uses: docker/build-push-action@v5
      with:
        context: ./src/api
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run API tests
      run: |
        cd src/api
        pip install -r requirements.txt
        pip install pytest pytest-cov
        python -m pytest tests/ -v --cov=. --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./src/api/coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Deploy to EKS
      run: |
        aws eks update-kubeconfig --region us-west-2 --name vpn-cluster-staging
        kubectl apply -f k8s/
        kubectl set image deployment/vpn-wireguard vpn-wireguard=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/wireguard:${{ github.sha }}
        kubectl set image deployment/vpn-api vpn-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ github.sha }}

    - name: Run integration tests
      run: |
        # Wait for deployment to be ready
        kubectl wait --for=condition=available --timeout=300s deployment/vpn-api
        kubectl wait --for=condition=available --timeout=300s deployment/vpn-wireguard
        
        # Run integration tests
        kubectl run integration-test --image=curlimages/curl --rm -i --restart=Never -- \
          curl -f http://vpn-api-service:8080/health

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Deploy to EKS
      run: |
        aws eks update-kubeconfig --region us-west-2 --name vpn-cluster-prod
        kubectl apply -f k8s/
        kubectl set image deployment/vpn-wireguard vpn-wireguard=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/wireguard:${{ github.sha }}
        kubectl set image deployment/vpn-api vpn-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ github.sha }}

    - name: Run smoke tests
      run: |
        kubectl wait --for=condition=available --timeout=300s deployment/vpn-api
        kubectl wait --for=condition=available --timeout=300s deployment/vpn-wireguard
        
        # Smoke tests
        kubectl run smoke-test --image=curlimages/curl --rm -i --restart=Never -- \
          curl -f http://vpn-api-service:8080/health

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#vpn-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # Infrastructure Deployment
  deploy-infrastructure:
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Terraform Init
      run: |
        cd infrastructure
        terraform init

    - name: Terraform Plan
      run: |
        cd infrastructure
        terraform plan -var="environment=prod" -out=tfplan

    - name: Terraform Apply
      run: |
        cd infrastructure
        terraform apply tfplan

    - name: Update DNS records
      run: |
        # Update DNS with new load balancer endpoints
        # This would typically use Route53 or similar
        echo "DNS update completed"






